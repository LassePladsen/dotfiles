#!/bin/bash
symlink_targets=(".bashrc" ".vimrc" ".inputrc" ".fzfrc" ".tmux.conf" ".fzf" ".tmux" ".config/nvim" ".config/espanso")

repo_path=$( cd "$(dirname "${BASH_SOURCE[0]}")" ; pwd -P )
cd $repo_path

# -f force flag: dont ask to backup & replace files
force=0

# Parse command line options
while getopts "f" opt; do
    case $opt in
        f) force=1 ;;
    esac
done

make_symlink()  {
    echo "ln -s $repo_path/$target ~/"
    ln -s $repo_path/$target ~ >/dev/null 2>&1
}

do_backup() {
    mkdir -p ~/backup/dotfiles >/dev/null 2>&1
    rm -rf ~/backup/dotfiles/$target # > /dev/null 2>&1 # delete old backup just incase
    mv ~/$target ~/backup/dotfiles/ # > /dev/null 2>&1
}

make_symlinks() {
    for target in "${symlink_targets[@]}"; do
        # If target exists, ask to replace it after backup, unless force flag
        if [[ -a ~/$target ]]; then

            # Unless they used the -f force flag, ask to backup and replace it
            if [[ $force -eq 0 ]];then
                # wait for input, read one character in silent mode (dont echo typed chars)
                read -p "$target already exists... back it up and replace it? (y/n) " -s -n 1 answer 
                echo ""
            fi

            # Backup and replace if they said yes or used the -f flag
            if [[ $force -ne 0 || $answer = 'y' ]]; then
                do_backup
                make_symlink
            fi
        else
            make_symlink
        fi
    done
}

# use stow if installed, else fallback to manually creating symlinks
if command -v stow >/dev/null 2>&1; then 
    git stash && 
        stow . -t ~ --adopt &&
        git restore .
else
    make_symlinks
fi

